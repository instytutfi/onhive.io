---
import type { z } from "astro/zod";
import config from "virtual:starlight/user-config";
import { version } from "../../package.json";
import type { HeadConfigSchema } from "../schemas/head";
import { fileWithBase } from "./utils/base";
import { createHead } from "./utils/head";
import { localizedUrl } from "./utils/localizedUrl";

const { entry, lang, siteTitle } = Astro.locals.starlightRoute;
const { data } = entry;

const canonical = Astro.site
  ? new URL(Astro.url.pathname, Astro.site)
  : undefined;
const description = data.description || config.description;

// Remove all icon brackets, their content and any whitespaces surrounding them from the title string
const titleWithoutIcons = data.title.replaceAll(/\s*\[.+\]\s*/gm, "");

const headDefaults: z.input<ReturnType<typeof HeadConfigSchema>> = [
  { tag: "meta", attrs: { charset: "utf-8" } },
  {
    tag: "meta",
    attrs: { name: "viewport", content: "width=device-width, initial-scale=1" }
  },
  {
    tag: "title",
    content: `${titleWithoutIcons} ${config.titleDelimiter} ${siteTitle}`
  },
  { tag: "link", attrs: { rel: "canonical", href: canonical?.href } },
  { tag: "meta", attrs: { name: "generator", content: Astro.generator } },
  {
    tag: "meta",
    attrs: { name: "generator", content: `Starlight v${version}` }
  },
  // Favicon
  {
    tag: "link",
    attrs: {
      rel: "shortcut icon",
      href: fileWithBase(config.favicon.href),
      type: config.favicon.type
    }
  },

  // Fonts
  {
    tag: "link",
    attrs: {
      rel: "preconnect",
      href: "https://fonts.googleapis.com"
    }
  },
  {
    tag: "link",
    attrs: {
      rel: "preconnect",
      href: "https://fonts.gstatic.com",
      crossorigin: true
    }
  },
  {
    tag: "link",
    attrs: {
      rel: "stylesheet",
      href: "https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300..700&family=Space+Mono:wght@400;700&display=swap"
    }
  },

  // OpenGraph Tags
  { tag: "meta", attrs: { property: "og:title", content: titleWithoutIcons } },
  { tag: "meta", attrs: { property: "og:type", content: "article" } },
  { tag: "meta", attrs: { property: "og:url", content: canonical?.href } },
  { tag: "meta", attrs: { property: "og:locale", content: lang } },
  { tag: "meta", attrs: { property: "og:description", content: description } },
  { tag: "meta", attrs: { property: "og:site_name", content: siteTitle } },
  // Twitter Tags
  {
    tag: "meta",
    attrs: { name: "twitter:card", content: "summary_large_image" }
  },
  {
    tag: "script",
    attrs: {
      defer: true,
      src: "https://umami.instytut.fi/script.js",
      "data-website-id": "c487e6d3-50e6-4fca-9de2-02d8886a0ced",
      "data-domains": "onhive.io"
    }
  }
];

if (description)
  headDefaults.push({
    tag: "meta",
    attrs: { name: "description", content: description }
  });

// Link to language alternates.
if (canonical && config.isMultilingual) {
  for (const locale in config.locales) {
    const localeOpts = config.locales[locale];
    if (!localeOpts) continue;
    headDefaults.push({
      tag: "link",
      attrs: {
        rel: "alternate",
        hreflang: localeOpts.lang,
        href: localizedUrl(canonical, locale).href
      }
    });
  }
}

// Link to sitemap, but only when `site` is set.
if (Astro.site) {
  headDefaults.push({
    tag: "link",
    attrs: {
      rel: "sitemap",
      href: fileWithBase("/sitemap-index.xml")
    }
  });
}

// @ts-expect-error Could use some cleaning up of this TS mess
const head = createHead(headDefaults, config.head, data.head);
---

{
  head.map(({ tag: Tag, attrs, content }) => (
    <Tag {...attrs} set:html={content} />
  ))
}
